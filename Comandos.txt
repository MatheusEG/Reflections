REMOVER PASTA
	rm -rf nomeDaPasta
CRIAR PASTA
	mkdir nomeDaPasta

------ Git -------------
criar as pastas e arquivos inicias

no terminal ir até a pasta

git init

git status

git add . (. add todos os arquivos, tb é possivél por nome ex: matheus.*)

git commit -m "Comentário aqui"

git diff (mostra as diferenças entre o arquivo localizado no working
directory e o que esta na stage area)

git diff --staged (mostra a diferença entre arquivos da stage area e commit)

git log --pretty=oneline ou git log --oneline(Printar somente id da commit e o comentário)

gitk (abrir interface grafica) 

git checkout HASH/CODIGO COMMIT/BRANCH/MASTER (voltar a um estado ou mudar o galho)

git rm (apagar arquivo)

----------------------DEU RUIM---------------------------------

rm -rf .git (Tirando a inicialização do git)

git reset HEAD nome.extencao (remover um arquivo da stage area)

git reset HEAD -- .(remover todos os arquivos da stage area)

git commit --amend -m "comentário"(Reescreve os dados da ultima commit com os atuais, também
					  				é possível mudar o texto da commit )


//HEAD significa a ultima commit do branch atual 
//HEAD~2 seriam as duas ultimas

git revert HEAD~1 (Se já tiver feito push, o melhor é "reverter" o ultimo commit,
				   em vez de o desfazer. "Reverter", neste contexto, significa
				   criar um commit novo que apague as linhas introduzidas
				   as linhas apagadas no último commit.)

git reset HEAD~1 --soft (Deletar commit sem descartar as mudanças já feitas 
						 no trabalho)

git reset HEAD~1 --hard (Descartar todas as mudanças no working directory e
						 stage area)
						 

git reset --hard 71c27777543ccfcb0376dcdd8f6777df055ef479(numero da commit que deseja voltar)
git push --force

git remote set-url origin git://new.url.here (atualizando remote)						 

-----------------------------------------------------

git branch (mostra todos os ramos do projeto)

git branch nome (adiciona um ramo)

git log --graph --oneline branch1 branch2(mostrar as alterações do master e do
branch)

git show commit_id(mostrar as alterações entre esta commit e sua antecessora)

git merge commit1 commit2 (misturar duas commits, LEMBRE-SE ESSE COMANDO
									MISTURA AUTOMATICAMENTE COM A COMMIT
									ATUAL SELECIONADA PELO CHECKOUT)

git branch -d branchName (apagar um branch)

------Conectar com github-----------

git remote (ver e criar remotes)

//-----"ORIGIN" É O NOME DO LOCAL BRANCH

git remote origin add URL (criar remote)

git push origin master (empurrar um ramo para o github)

git pull origin master	(puxar um ramo para o github)

git fetch (atualiza somente o ramo origin sem fazer o "merge" com suas 
			alterações locais)

git pull origin master = git fetch origin
						 git merge master origin/master




É possível deixar alguns arquivos invisiveis para o git, para isso basta
criar um arquivo com o nome ".gitignore" e dentro dele add os nomes
dos arquivos a serem ignorados, um em cada linha.

